const Binance = require('binance-api-node').default;

class TradingBot {
    constructor(apiKey, apiSecret, testnet = true) {
        this.client = Binance({
            apiKey: apiKey,
            apiSecret: apiSecret,
            test: testnet,
            futures: true
        });
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –≤—Ö–æ–¥—è—â—É—é –∫–æ–º–∞–Ω–¥—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
     * –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:
     * "BUY BTCUSDT 20x 0.01 SL=42000 TP=45000"
     * "SELL ETHUSDT 10x 0.1 HOLD"
     * @param {string} command - –≤—Ö–æ–¥—è—â–∞—è –∫–æ–º–∞–Ω–¥–∞
     * @returns {object|null} - –æ–±—ä–µ–∫—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
     */
    parseCommand(command) {
        try {
            const parts = command.trim().split(/\s+/);
            
            if (parts.length < 4) {
                throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ');
            }

            const direction = parts[0].toUpperCase();
            const symbol = parts[1].toUpperCase();
            const leverageStr = parts[2];
            const quantity = parseFloat(parts[3]);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
            if (!['BUY', 'SELL'].includes(direction)) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ BUY –∏–ª–∏ SELL');
            }

            // –ü–∞—Ä—Å–∏–Ω–≥ –ø–ª–µ—á–∞
            const leverage = parseInt(leverageStr.replace('x', ''));
            if (isNaN(leverage) || leverage < 1 || leverage > 125) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–µ—á–∞');
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            if (isNaN(quantity) || quantity <= 0) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ä–¥–µ—Ä–∞');
            }

            const tradeParams = {
                side: direction === 'BUY' ? 'LONG' : 'SHORT',
                symbol: symbol,
                leverage: leverage,
                quantity: quantity,
                stopLoss: null,
                takeProfit: null,
                hold: false
            };

            // –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (SL, TP, HOLD)
            for (let i = 4; i < parts.length; i++) {
                const param = parts[i];
                
                if (param.startsWith('SL=')) {
                    const slValue = parseFloat(param.split('=')[1]);
                    if (!isNaN(slValue)) {
                        tradeParams.stopLoss = slValue;
                    }
                } else if (param.startsWith('TP=')) {
                    const tpValue = parseFloat(param.split('=')[1]);
                    if (!isNaN(tpValue)) {
                        tradeParams.takeProfit = tpValue;
                    }
                } else if (param.toUpperCase() === 'HOLD') {
                    tradeParams.hold = true;
                }
            }

            return tradeParams;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã -', error.message);
            return null;
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–µ—á–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
     * @param {string} symbol - —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
     * @param {number} leverage - –ø–ª–µ—á–æ
     */
    async setLeverage(symbol, leverage) {
        try {
            await this.client.futuresLeverage({
                symbol: symbol,
                leverage: leverage
            });
            console.log(`‚úÖ –ü–ª–µ—á–æ ${leverage}x —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${symbol}`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞ –¥–ª—è ${symbol}:`, error.message);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å–∏–º–≤–æ–ª–∞
     * @param {string} symbol - —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
     * @returns {number} - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
     */
    async getCurrentPrice(symbol) {
        try {
            const ticker = await this.client.futuresPrices({ symbol: symbol });
            return parseFloat(ticker[symbol]);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è ${symbol}:`, error.message);
            throw error;
        }
    }

    /**
     * –†–∞–∑–º–µ—â–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
     * @param {object} tradeParams - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
     */
    async placeMarketOrder(tradeParams) {
        try {
            const { symbol, side, quantity, leverage } = tradeParams;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ
            await this.setLeverage(symbol, leverage);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è Binance API
            const orderSide = side === 'LONG' ? 'BUY' : 'SELL';

            // –†–∞–∑–º–µ—â–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
            const order = await this.client.futuresOrder({
                symbol: symbol,
                side: orderSide,
                type: 'MARKET',
                quantity: quantity.toString()
            });

            console.log(`‚úÖ –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω:`);
            console.log(`   –°–∏–º–≤–æ–ª: ${symbol}`);
            console.log(`   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${side}`);
            console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity}`);
            console.log(`   –ü–ª–µ—á–æ: ${leverage}x`);
            console.log(`   Order ID: ${order.orderId}`);

            return order;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞:', error.message);
            throw error;
        }
    }

    /**
     * –†–∞–∑–º–µ—â–∞–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–¥–µ—Ä
     * @param {string} symbol - —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
     * @param {string} side - –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏)
     * @param {number} quantity - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
     * @param {number} stopPrice - —Ü–µ–Ω–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
     */
    async placeStopLossOrder(symbol, side, quantity, stopPrice) {
        try {
            const order = await this.client.futuresOrder({
                symbol: symbol,
                side: side,
                type: 'STOP_MARKET',
                quantity: quantity.toString(),
                stopPrice: stopPrice.toString(),
                timeInForce: 'GTC'
            });

            console.log(`‚úÖ –°—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω –ø–æ —Ü–µ–Ω–µ ${stopPrice}`);
            return order;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–¥–µ—Ä–∞:', error.message);
            throw error;
        }
    }

    /**
     * –†–∞–∑–º–µ—â–∞–µ—Ç —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ä–¥–µ—Ä
     * @param {string} symbol - —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
     * @param {string} side - –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏)
     * @param {number} quantity - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
     * @param {number} takeProfitPrice - —Ü–µ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
     */
    async placeTakeProfitOrder(symbol, side, quantity, takeProfitPrice) {
        try {
            const order = await this.client.futuresOrder({
                symbol: symbol,
                side: side,
                type: 'TAKE_PROFIT_MARKET',
                quantity: quantity.toString(),
                stopPrice: takeProfitPrice.toString(),
                timeInForce: 'GTC'
            });

            console.log(`‚úÖ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω –ø–æ —Ü–µ–Ω–µ ${takeProfitPrice}`);
            return order;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ä–¥–µ—Ä–∞:', error.message);
            throw error;
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     * @param {object} tradeParams - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
     */
    async executeTrade(tradeParams) {
        try {
            console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏...');
            console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', tradeParams);

            // –†–∞–∑–º–µ—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
            const mainOrder = await this.placeMarketOrder(tradeParams);

            // –ï—Å–ª–∏ –Ω–µ —Ä–µ–∂–∏–º HOLD, —Ä–∞–∑–º–µ—â–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            if (!tradeParams.hold) {
                const { symbol, side, quantity, stopLoss, takeProfit } = tradeParams;
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
                const closeSide = side === 'LONG' ? 'SELL' : 'BUY';

                // –†–∞–∑–º–µ—â–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                if (stopLoss) {
                    await this.placeStopLossOrder(symbol, closeSide, quantity, stopLoss);
                }

                // –†–∞–∑–º–µ—â–∞–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                if (takeProfit) {
                    await this.placeTakeProfitOrder(symbol, closeSide, quantity, takeProfit);
                }
            } else {
                console.log('üìã –†–µ–∂–∏–º HOLD –∞–∫—Ç–∏–≤–µ–Ω - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–µ —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è');
            }

            console.log('‚úÖ –¢–æ—Ä–≥–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n');
            return mainOrder;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:', error.message);
            throw error;
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â—É—é –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é
     * @param {string} command - –≤—Ö–æ–¥—è—â–∞—è –∫–æ–º–∞–Ω–¥–∞
     */
    async processCommand(command) {
        console.log(`\nüì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: "${command}"`);
        
        const tradeParams = this.parseCommand(command);
        
        if (!tradeParams) {
            return false;
        }

        try {
            await this.executeTrade(tradeParams);
            return true;
        } catch (error) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é:', error.message);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    async getAccountInfo() {
        try {
            const accountInfo = await this.client.futuresAccountInfo();
            console.log('\nüí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:');
            console.log(`–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${accountInfo.totalWalletBalance} USDT`);
            console.log(`–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${accountInfo.availableBalance} USDT`);
            
            return accountInfo;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:', error.message);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
     */
    async getOpenPositions() {
        try {
            const positions = await this.client.futuresPositionRisk();
            const openPositions = positions.filter(pos => parseFloat(pos.positionAmt) !== 0);
            
            console.log('\nüìä –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:');
            if (openPositions.length === 0) {
                console.log('–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π');
            } else {
                openPositions.forEach(pos => {
                    console.log(`${pos.symbol}: ${pos.positionAmt} (PnL: ${pos.unRealizedProfit} USDT)`);
                });
            }
            
            return openPositions;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π:', error.message);
            throw error;
        }
    }
}

module.exports = TradingBot;
